// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "protos/eliza.proto" (package "buf.connect.demo.eliza.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ElizaService } from "./eliza";
import type { IntroduceResponse } from "./eliza";
import type { IntroduceRequest } from "./eliza";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ConverseResponse } from "./eliza";
import type { ConverseRequest } from "./eliza";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SayResponse } from "./eliza";
import type { SayRequest } from "./eliza";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service buf.connect.demo.eliza.v1.ElizaService
 */
export interface IElizaServiceClient {
    /**
     * @generated from protobuf rpc: Say(buf.connect.demo.eliza.v1.SayRequest) returns (buf.connect.demo.eliza.v1.SayResponse);
     */
    say(input: SayRequest, options?: RpcOptions): UnaryCall<SayRequest, SayResponse>;
    /**
     * @generated from protobuf rpc: Converse(stream buf.connect.demo.eliza.v1.ConverseRequest) returns (stream buf.connect.demo.eliza.v1.ConverseResponse);
     */
    converse(options?: RpcOptions): DuplexStreamingCall<ConverseRequest, ConverseResponse>;
    /**
     * @generated from protobuf rpc: Introduce(buf.connect.demo.eliza.v1.IntroduceRequest) returns (stream buf.connect.demo.eliza.v1.IntroduceResponse);
     */
    introduce(input: IntroduceRequest, options?: RpcOptions): ServerStreamingCall<IntroduceRequest, IntroduceResponse>;
}
/**
 * @generated from protobuf service buf.connect.demo.eliza.v1.ElizaService
 */
export class ElizaServiceClient implements IElizaServiceClient, ServiceInfo {
    typeName = ElizaService.typeName;
    methods = ElizaService.methods;
    options = ElizaService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Say(buf.connect.demo.eliza.v1.SayRequest) returns (buf.connect.demo.eliza.v1.SayResponse);
     */
    say(input: SayRequest, options?: RpcOptions): UnaryCall<SayRequest, SayResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SayRequest, SayResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Converse(stream buf.connect.demo.eliza.v1.ConverseRequest) returns (stream buf.connect.demo.eliza.v1.ConverseResponse);
     */
    converse(options?: RpcOptions): DuplexStreamingCall<ConverseRequest, ConverseResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConverseRequest, ConverseResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: Introduce(buf.connect.demo.eliza.v1.IntroduceRequest) returns (stream buf.connect.demo.eliza.v1.IntroduceResponse);
     */
    introduce(input: IntroduceRequest, options?: RpcOptions): ServerStreamingCall<IntroduceRequest, IntroduceResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<IntroduceRequest, IntroduceResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
