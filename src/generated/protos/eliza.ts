// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "protos/eliza.proto" (package "buf.connect.demo.eliza.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message buf.connect.demo.eliza.v1.SayRequest
 */
export interface SayRequest {
    /**
     * @generated from protobuf field: string sentence = 1;
     */
    sentence: string;
}
/**
 * @generated from protobuf message buf.connect.demo.eliza.v1.SayResponse
 */
export interface SayResponse {
    /**
     * @generated from protobuf field: string sentence = 1;
     */
    sentence: string;
}
/**
 * @generated from protobuf message buf.connect.demo.eliza.v1.ConverseRequest
 */
export interface ConverseRequest {
    /**
     * @generated from protobuf field: string sentence = 1;
     */
    sentence: string;
}
/**
 * @generated from protobuf message buf.connect.demo.eliza.v1.ConverseResponse
 */
export interface ConverseResponse {
    /**
     * @generated from protobuf field: string sentence = 1;
     */
    sentence: string;
}
/**
 * @generated from protobuf message buf.connect.demo.eliza.v1.IntroduceRequest
 */
export interface IntroduceRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message buf.connect.demo.eliza.v1.IntroduceResponse
 */
export interface IntroduceResponse {
    /**
     * @generated from protobuf field: string sentence = 1;
     */
    sentence: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SayRequest$Type extends MessageType<SayRequest> {
    constructor() {
        super("buf.connect.demo.eliza.v1.SayRequest", [
            { no: 1, name: "sentence", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SayRequest>): SayRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sentence = "";
        if (value !== undefined)
            reflectionMergePartial<SayRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SayRequest): SayRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sentence */ 1:
                    message.sentence = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SayRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sentence = 1; */
        if (message.sentence !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sentence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message buf.connect.demo.eliza.v1.SayRequest
 */
export const SayRequest = new SayRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SayResponse$Type extends MessageType<SayResponse> {
    constructor() {
        super("buf.connect.demo.eliza.v1.SayResponse", [
            { no: 1, name: "sentence", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SayResponse>): SayResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sentence = "";
        if (value !== undefined)
            reflectionMergePartial<SayResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SayResponse): SayResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sentence */ 1:
                    message.sentence = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SayResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sentence = 1; */
        if (message.sentence !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sentence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message buf.connect.demo.eliza.v1.SayResponse
 */
export const SayResponse = new SayResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConverseRequest$Type extends MessageType<ConverseRequest> {
    constructor() {
        super("buf.connect.demo.eliza.v1.ConverseRequest", [
            { no: 1, name: "sentence", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConverseRequest>): ConverseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sentence = "";
        if (value !== undefined)
            reflectionMergePartial<ConverseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConverseRequest): ConverseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sentence */ 1:
                    message.sentence = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConverseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sentence = 1; */
        if (message.sentence !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sentence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message buf.connect.demo.eliza.v1.ConverseRequest
 */
export const ConverseRequest = new ConverseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConverseResponse$Type extends MessageType<ConverseResponse> {
    constructor() {
        super("buf.connect.demo.eliza.v1.ConverseResponse", [
            { no: 1, name: "sentence", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConverseResponse>): ConverseResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sentence = "";
        if (value !== undefined)
            reflectionMergePartial<ConverseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConverseResponse): ConverseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sentence */ 1:
                    message.sentence = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConverseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sentence = 1; */
        if (message.sentence !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sentence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message buf.connect.demo.eliza.v1.ConverseResponse
 */
export const ConverseResponse = new ConverseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntroduceRequest$Type extends MessageType<IntroduceRequest> {
    constructor() {
        super("buf.connect.demo.eliza.v1.IntroduceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntroduceRequest>): IntroduceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<IntroduceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntroduceRequest): IntroduceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntroduceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message buf.connect.demo.eliza.v1.IntroduceRequest
 */
export const IntroduceRequest = new IntroduceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntroduceResponse$Type extends MessageType<IntroduceResponse> {
    constructor() {
        super("buf.connect.demo.eliza.v1.IntroduceResponse", [
            { no: 1, name: "sentence", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntroduceResponse>): IntroduceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sentence = "";
        if (value !== undefined)
            reflectionMergePartial<IntroduceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntroduceResponse): IntroduceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sentence */ 1:
                    message.sentence = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntroduceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sentence = 1; */
        if (message.sentence !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sentence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message buf.connect.demo.eliza.v1.IntroduceResponse
 */
export const IntroduceResponse = new IntroduceResponse$Type();
/**
 * @generated ServiceType for protobuf service buf.connect.demo.eliza.v1.ElizaService
 */
export const ElizaService = new ServiceType("buf.connect.demo.eliza.v1.ElizaService", [
    { name: "Say", options: {}, I: SayRequest, O: SayResponse },
    { name: "Converse", serverStreaming: true, clientStreaming: true, options: {}, I: ConverseRequest, O: ConverseResponse },
    { name: "Introduce", serverStreaming: true, options: {}, I: IntroduceRequest, O: IntroduceResponse }
]);
